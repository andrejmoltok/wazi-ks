# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Character {
  id: ID!
  username: String
  role: String
  isAdmin: Boolean
  isDM: Boolean
  isUser: Boolean
  serial: String
  characterName: String
  sex: String
  email: String
  password: PasswordState
  reacts(where: ReactionWhereInput! = {}, orderBy: [ReactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReactionWhereUniqueInput): [Reaction!]
  reactsCount(where: ReactionWhereInput! = {}): Int
  money: Int
  raceSelect: Race
  characterLevel: Int
  rank: String
  isBeginner: Boolean
  isPlayer: Boolean
  isAdvanced: Boolean
  isExperienced: Boolean
  strength: Int
  strengthScoreIncrease: Int
  dexterity: Int
  dexterityScoreIncrease: Int
  constitution: Int
  constitutionScoreIncrease: Int
  intelligence: Int
  intelligenceScoreIncrease: Int
  wisdom: Int
  wisdomScoreIncrease: Int
  charisma: Int
  charismaScoreIncrease: Int
  languages(where: LanguageWhereInput! = {}, orderBy: [LanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageWhereUniqueInput): [Language!]
  languagesCount(where: LanguageWhereInput! = {}): Int
  outerDescription: Character_outerDescription_Document
  innerDescription: Character_innerDescription_Document
  backStory: Character_backStory_Document
  notes: Character_notes_Document
  gameStyle: String
  belief: String
  events: Character_events_Document
  backpack: Character_backpack_Document
  backPackContents: Int
  backPackSlots: Int
  registeredAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

type Character_outerDescription_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Character_innerDescription_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Character_backStory_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Character_notes_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Character_events_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Character_backpack_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CharacterWhereUniqueInput {
  id: ID
  characterName: String
  email: String
}

input CharacterWhereInput {
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
  id: IDFilter
  username: StringFilter
  role: StringNullableFilter
  serial: StringFilter
  characterName: StringFilter
  sex: StringNullableFilter
  email: StringFilter
  reacts: ReactionManyRelationFilter
  money: IntNullableFilter
  raceSelect: RaceWhereInput
  characterLevel: IntNullableFilter
  rank: StringNullableFilter
  strength: IntNullableFilter
  dexterity: IntNullableFilter
  constitution: IntNullableFilter
  intelligence: IntNullableFilter
  wisdom: IntNullableFilter
  charisma: IntNullableFilter
  languages: LanguageManyRelationFilter
  gameStyle: StringNullableFilter
  belief: StringNullableFilter
  backPackContents: IntNullableFilter
  backPackSlots: IntNullableFilter
  registeredAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input ReactionManyRelationFilter {
  every: ReactionWhereInput
  some: ReactionWhereInput
  none: ReactionWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input LanguageManyRelationFilter {
  every: LanguageWhereInput
  some: LanguageWhereInput
  none: LanguageWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CharacterOrderByInput {
  id: OrderDirection
  username: OrderDirection
  role: OrderDirection
  serial: OrderDirection
  characterName: OrderDirection
  sex: OrderDirection
  email: OrderDirection
  money: OrderDirection
  characterLevel: OrderDirection
  rank: OrderDirection
  strength: OrderDirection
  dexterity: OrderDirection
  constitution: OrderDirection
  intelligence: OrderDirection
  wisdom: OrderDirection
  charisma: OrderDirection
  gameStyle: OrderDirection
  belief: OrderDirection
  backPackContents: OrderDirection
  backPackSlots: OrderDirection
  registeredAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CharacterUpdateInput {
  username: String
  role: String
  serial: String
  characterName: String
  sex: String
  email: String
  password: String
  reacts: ReactionRelateToManyForUpdateInput
  money: Int
  raceSelect: RaceRelateToOneForUpdateInput
  characterLevel: Int
  rank: String
  strength: Int
  dexterity: Int
  constitution: Int
  intelligence: Int
  wisdom: Int
  charisma: Int
  languages: LanguageRelateToManyForUpdateInput
  outerDescription: JSON
  innerDescription: JSON
  backStory: JSON
  notes: JSON
  gameStyle: String
  belief: String
  events: JSON
  backpack: JSON
  backPackContents: Int
  backPackSlots: Int
  registeredAt: DateTime
}

input ReactionRelateToManyForUpdateInput {
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  create: [ReactionCreateInput!]
  connect: [ReactionWhereUniqueInput!]
}

input RaceRelateToOneForUpdateInput {
  create: RaceCreateInput
  connect: RaceWhereUniqueInput
  disconnect: Boolean
}

input LanguageRelateToManyForUpdateInput {
  disconnect: [LanguageWhereUniqueInput!]
  set: [LanguageWhereUniqueInput!]
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

input CharacterUpdateArgs {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateInput!
}

input CharacterCreateInput {
  username: String
  role: String
  serial: String
  characterName: String
  sex: String
  email: String
  password: String
  reacts: ReactionRelateToManyForCreateInput
  money: Int
  raceSelect: RaceRelateToOneForCreateInput
  characterLevel: Int
  rank: String
  strength: Int
  dexterity: Int
  constitution: Int
  intelligence: Int
  wisdom: Int
  charisma: Int
  languages: LanguageRelateToManyForCreateInput
  outerDescription: JSON
  innerDescription: JSON
  backStory: JSON
  notes: JSON
  gameStyle: String
  belief: String
  events: JSON
  backpack: JSON
  backPackContents: Int
  backPackSlots: Int
  registeredAt: DateTime
}

input ReactionRelateToManyForCreateInput {
  create: [ReactionCreateInput!]
  connect: [ReactionWhereUniqueInput!]
}

input RaceRelateToOneForCreateInput {
  create: RaceCreateInput
  connect: RaceWhereUniqueInput
}

input LanguageRelateToManyForCreateInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

type Multi {
  id: ID!
  main: String
  mainCharacter: Character
  connectedCharacters(where: CharacterWhereInput! = {}, orderBy: [CharacterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CharacterWhereUniqueInput): [Character!]
  connectedCharactersCount(where: CharacterWhereInput! = {}): Int
}

input MultiWhereUniqueInput {
  id: ID
}

input MultiWhereInput {
  AND: [MultiWhereInput!]
  OR: [MultiWhereInput!]
  NOT: [MultiWhereInput!]
  id: IDFilter
  main: StringFilter
  mainCharacter: CharacterWhereInput
  connectedCharacters: CharacterManyRelationFilter
}

input CharacterManyRelationFilter {
  every: CharacterWhereInput
  some: CharacterWhereInput
  none: CharacterWhereInput
}

input MultiOrderByInput {
  id: OrderDirection
  main: OrderDirection
}

input MultiUpdateInput {
  main: String
  mainCharacter: CharacterRelateToOneForUpdateInput
  connectedCharacters: CharacterRelateToManyForUpdateInput
}

input CharacterRelateToOneForUpdateInput {
  create: CharacterCreateInput
  connect: CharacterWhereUniqueInput
  disconnect: Boolean
}

input CharacterRelateToManyForUpdateInput {
  disconnect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  create: [CharacterCreateInput!]
  connect: [CharacterWhereUniqueInput!]
}

input MultiUpdateArgs {
  where: MultiWhereUniqueInput!
  data: MultiUpdateInput!
}

input MultiCreateInput {
  main: String
  mainCharacter: CharacterRelateToOneForCreateInput
  connectedCharacters: CharacterRelateToManyForCreateInput
}

input CharacterRelateToOneForCreateInput {
  create: CharacterCreateInput
  connect: CharacterWhereUniqueInput
}

input CharacterRelateToManyForCreateInput {
  create: [CharacterCreateInput!]
  connect: [CharacterWhereUniqueInput!]
}

type Inventory {
  id: ID!
  rightHandWeapon: String
  leftHandWeapon: String
  shield: String
  armor: String
  casque: String
  amulet: String
  other: String
}

input InventoryWhereUniqueInput {
  id: ID
}

input InventoryWhereInput {
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
  id: IDFilter
  rightHandWeapon: StringFilter
  leftHandWeapon: StringFilter
  shield: StringFilter
  armor: StringFilter
  casque: StringFilter
  amulet: StringFilter
  other: StringFilter
}

input InventoryOrderByInput {
  id: OrderDirection
  rightHandWeapon: OrderDirection
  leftHandWeapon: OrderDirection
  shield: OrderDirection
  armor: OrderDirection
  casque: OrderDirection
  amulet: OrderDirection
  other: OrderDirection
}

input InventoryUpdateInput {
  rightHandWeapon: String
  leftHandWeapon: String
  shield: String
  armor: String
  casque: String
  amulet: String
  other: String
}

input InventoryUpdateArgs {
  where: InventoryWhereUniqueInput!
  data: InventoryUpdateInput!
}

input InventoryCreateInput {
  rightHandWeapon: String
  leftHandWeapon: String
  shield: String
  armor: String
  casque: String
  amulet: String
  other: String
}

type Reaction {
  id: ID!
  title: String
  reaction: Reaction_reaction_Document
  author: String
  location: String
  serial: Int
  writtenAt: DateTime
}

type Reaction_reaction_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ReactionWhereUniqueInput {
  id: ID
}

input ReactionWhereInput {
  AND: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  NOT: [ReactionWhereInput!]
  id: IDFilter
  title: StringFilter
  author: StringFilter
  location: StringFilter
  serial: IntNullableFilter
  writtenAt: DateTimeNullableFilter
}

input ReactionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  author: OrderDirection
  location: OrderDirection
  serial: OrderDirection
  writtenAt: OrderDirection
}

input ReactionUpdateInput {
  title: String
  reaction: JSON
  author: String
  location: String
  serial: Int
  writtenAt: DateTime
}

input ReactionUpdateArgs {
  where: ReactionWhereUniqueInput!
  data: ReactionUpdateInput!
}

input ReactionCreateInput {
  title: String
  reaction: JSON
  author: String
  location: String
  serial: Int
  writtenAt: DateTime
}

type Request {
  id: ID!
  who: String
  gameType: String
  description: Request_description_Document
  accepted: Boolean
  rejected: Boolean
  rejectionReason: String
  rejectionFeedback: Request_rejectionFeedback_Document
  requestedAt: DateTime
}

type Request_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Request_rejectionFeedback_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input RequestWhereUniqueInput {
  id: ID
}

input RequestWhereInput {
  AND: [RequestWhereInput!]
  OR: [RequestWhereInput!]
  NOT: [RequestWhereInput!]
  id: IDFilter
  who: StringFilter
  gameType: StringNullableFilter
  accepted: BooleanFilter
  rejected: BooleanFilter
  rejectionReason: StringFilter
  requestedAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input RequestOrderByInput {
  id: OrderDirection
  who: OrderDirection
  gameType: OrderDirection
  accepted: OrderDirection
  rejected: OrderDirection
  rejectionReason: OrderDirection
  requestedAt: OrderDirection
}

input RequestUpdateInput {
  who: String
  gameType: String
  description: JSON
  accepted: Boolean
  rejected: Boolean
  rejectionReason: String
  rejectionFeedback: JSON
  requestedAt: DateTime
}

input RequestUpdateArgs {
  where: RequestWhereUniqueInput!
  data: RequestUpdateInput!
}

input RequestCreateInput {
  who: String
  gameType: String
  description: JSON
  accepted: Boolean
  rejected: Boolean
  rejectionReason: String
  rejectionFeedback: JSON
  requestedAt: DateTime
}

type Race {
  id: ID!
  name: String
  description: Race_description_Document
  strength: Int
  dexterity: Int
  constitution: Int
  intelligence: Int
  wisdom: Int
  charisma: Int
}

type Race_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input RaceWhereUniqueInput {
  id: ID
  name: String
}

input RaceWhereInput {
  AND: [RaceWhereInput!]
  OR: [RaceWhereInput!]
  NOT: [RaceWhereInput!]
  id: IDFilter
  name: StringFilter
  strength: IntNullableFilter
  dexterity: IntNullableFilter
  constitution: IntNullableFilter
  intelligence: IntNullableFilter
  wisdom: IntNullableFilter
  charisma: IntNullableFilter
}

input RaceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  strength: OrderDirection
  dexterity: OrderDirection
  constitution: OrderDirection
  intelligence: OrderDirection
  wisdom: OrderDirection
  charisma: OrderDirection
}

input RaceUpdateInput {
  name: String
  description: JSON
  strength: Int
  dexterity: Int
  constitution: Int
  intelligence: Int
  wisdom: Int
  charisma: Int
}

input RaceUpdateArgs {
  where: RaceWhereUniqueInput!
  data: RaceUpdateInput!
}

input RaceCreateInput {
  name: String
  description: JSON
  strength: Int
  dexterity: Int
  constitution: Int
  intelligence: Int
  wisdom: Int
  charisma: Int
}

type Language {
  id: ID!
  name: String
}

input LanguageWhereUniqueInput {
  id: ID
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  name: StringFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input LanguageUpdateInput {
  name: String
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  name: String
}

type Calendar {
  id: ID!
  calendarName: String
  startingYear: JSON
  firstDay: JSON
  yearLength: JSON
  numberOfMonths: JSON
  months: JSON
  monthsLength: JSON
  weekLength: JSON
  weekDays: JSON
  numberOfMoons: JSON
  moons: JSON
  lunarCycle: JSON
}

input CalendarWhereUniqueInput {
  id: ID
  calendarName: String
}

input CalendarWhereInput {
  AND: [CalendarWhereInput!]
  OR: [CalendarWhereInput!]
  NOT: [CalendarWhereInput!]
  id: IDFilter
  calendarName: StringFilter
}

input CalendarOrderByInput {
  id: OrderDirection
  calendarName: OrderDirection
}

input CalendarUpdateInput {
  calendarName: String
  startingYear: JSON
  firstDay: JSON
  yearLength: JSON
  numberOfMonths: JSON
  months: JSON
  monthsLength: JSON
  weekLength: JSON
  weekDays: JSON
  numberOfMoons: JSON
  moons: JSON
  lunarCycle: JSON
}

input CalendarUpdateArgs {
  where: CalendarWhereUniqueInput!
  data: CalendarUpdateInput!
}

input CalendarCreateInput {
  calendarName: String
  startingYear: JSON
  firstDay: JSON
  yearLength: JSON
  numberOfMonths: JSON
  months: JSON
  monthsLength: JSON
  weekLength: JSON
  weekDays: JSON
  numberOfMoons: JSON
  moons: JSON
  lunarCycle: JSON
}

type Log {
  id: ID!
  who: String
  what: String
  when: DateTime
}

input LogWhereUniqueInput {
  id: ID
}

input LogWhereInput {
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
  id: IDFilter
  who: StringFilter
  what: StringNullableFilter
  when: DateTimeNullableFilter
}

input LogOrderByInput {
  id: OrderDirection
  who: OrderDirection
  what: OrderDirection
  when: OrderDirection
}

input LogUpdateInput {
  who: String
  what: String
  when: DateTime
}

input LogUpdateArgs {
  where: LogWhereUniqueInput!
  data: LogUpdateInput!
}

input LogCreateInput {
  who: String
  what: String
  when: DateTime
}

type PM {
  id: ID!
  who: String
  toWhom: String
  what: PM_what_Document
  reported: Boolean
  when: DateTime
}

type PM_what_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PMWhereUniqueInput {
  id: ID
}

input PMWhereInput {
  AND: [PMWhereInput!]
  OR: [PMWhereInput!]
  NOT: [PMWhereInput!]
  id: IDFilter
  who: StringFilter
  toWhom: StringFilter
  reported: BooleanFilter
  when: DateTimeNullableFilter
}

input PMOrderByInput {
  id: OrderDirection
  who: OrderDirection
  toWhom: OrderDirection
  reported: OrderDirection
  when: OrderDirection
}

input PMUpdateInput {
  who: String
  toWhom: String
  what: JSON
  reported: Boolean
  when: DateTime
}

input PMUpdateArgs {
  where: PMWhereUniqueInput!
  data: PMUpdateInput!
}

input PMCreateInput {
  who: String
  toWhom: String
  what: JSON
  reported: Boolean
  when: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createCharacter(data: CharacterCreateInput!): Character
  createCharacters(data: [CharacterCreateInput!]!): [Character]
  updateCharacter(where: CharacterWhereUniqueInput!, data: CharacterUpdateInput!): Character
  updateCharacters(data: [CharacterUpdateArgs!]!): [Character]
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteCharacters(where: [CharacterWhereUniqueInput!]!): [Character]
  createMulti(data: MultiCreateInput!): Multi
  createMultis(data: [MultiCreateInput!]!): [Multi]
  updateMulti(where: MultiWhereUniqueInput!, data: MultiUpdateInput!): Multi
  updateMultis(data: [MultiUpdateArgs!]!): [Multi]
  deleteMulti(where: MultiWhereUniqueInput!): Multi
  deleteMultis(where: [MultiWhereUniqueInput!]!): [Multi]
  createInventory(data: InventoryCreateInput!): Inventory
  createInventories(data: [InventoryCreateInput!]!): [Inventory]
  updateInventory(where: InventoryWhereUniqueInput!, data: InventoryUpdateInput!): Inventory
  updateInventories(data: [InventoryUpdateArgs!]!): [Inventory]
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteInventories(where: [InventoryWhereUniqueInput!]!): [Inventory]
  createReaction(data: ReactionCreateInput!): Reaction
  createReactions(data: [ReactionCreateInput!]!): [Reaction]
  updateReaction(where: ReactionWhereUniqueInput!, data: ReactionUpdateInput!): Reaction
  updateReactions(data: [ReactionUpdateArgs!]!): [Reaction]
  deleteReaction(where: ReactionWhereUniqueInput!): Reaction
  deleteReactions(where: [ReactionWhereUniqueInput!]!): [Reaction]
  createRequest(data: RequestCreateInput!): Request
  createRequests(data: [RequestCreateInput!]!): [Request]
  updateRequest(where: RequestWhereUniqueInput!, data: RequestUpdateInput!): Request
  updateRequests(data: [RequestUpdateArgs!]!): [Request]
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteRequests(where: [RequestWhereUniqueInput!]!): [Request]
  createRace(data: RaceCreateInput!): Race
  createRaces(data: [RaceCreateInput!]!): [Race]
  updateRace(where: RaceWhereUniqueInput!, data: RaceUpdateInput!): Race
  updateRaces(data: [RaceUpdateArgs!]!): [Race]
  deleteRace(where: RaceWhereUniqueInput!): Race
  deleteRaces(where: [RaceWhereUniqueInput!]!): [Race]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(where: LanguageWhereUniqueInput!, data: LanguageUpdateInput!): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createCalendar(data: CalendarCreateInput!): Calendar
  createCalendars(data: [CalendarCreateInput!]!): [Calendar]
  updateCalendar(where: CalendarWhereUniqueInput!, data: CalendarUpdateInput!): Calendar
  updateCalendars(data: [CalendarUpdateArgs!]!): [Calendar]
  deleteCalendar(where: CalendarWhereUniqueInput!): Calendar
  deleteCalendars(where: [CalendarWhereUniqueInput!]!): [Calendar]
  createLog(data: LogCreateInput!): Log
  createLogs(data: [LogCreateInput!]!): [Log]
  updateLog(where: LogWhereUniqueInput!, data: LogUpdateInput!): Log
  updateLogs(data: [LogUpdateArgs!]!): [Log]
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteLogs(where: [LogWhereUniqueInput!]!): [Log]
  createPM(data: PMCreateInput!): PM
  createPMS(data: [PMCreateInput!]!): [PM]
  updatePM(where: PMWhereUniqueInput!, data: PMUpdateInput!): PM
  updatePMS(data: [PMUpdateArgs!]!): [PM]
  deletePM(where: PMWhereUniqueInput!): PM
  deletePMS(where: [PMWhereUniqueInput!]!): [PM]
  endSession: Boolean!
  authenticateCharacterWithPassword(email: String!, password: String!): CharacterAuthenticationWithPasswordResult
  createInitialCharacter(data: CreateInitialCharacterInput!): CharacterAuthenticationWithPasswordSuccess!
}

union CharacterAuthenticationWithPasswordResult = CharacterAuthenticationWithPasswordSuccess | CharacterAuthenticationWithPasswordFailure

type CharacterAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Character!
}

type CharacterAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialCharacterInput {
  username: String
  email: String
  password: String
}

type Query {
  characters(where: CharacterWhereInput! = {}, orderBy: [CharacterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CharacterWhereUniqueInput): [Character!]
  character(where: CharacterWhereUniqueInput!): Character
  charactersCount(where: CharacterWhereInput! = {}): Int
  multis(where: MultiWhereInput! = {}, orderBy: [MultiOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MultiWhereUniqueInput): [Multi!]
  multi(where: MultiWhereUniqueInput!): Multi
  multisCount(where: MultiWhereInput! = {}): Int
  inventories(where: InventoryWhereInput! = {}, orderBy: [InventoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InventoryWhereUniqueInput): [Inventory!]
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventoriesCount(where: InventoryWhereInput! = {}): Int
  reactions(where: ReactionWhereInput! = {}, orderBy: [ReactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReactionWhereUniqueInput): [Reaction!]
  reaction(where: ReactionWhereUniqueInput!): Reaction
  reactionsCount(where: ReactionWhereInput! = {}): Int
  requests(where: RequestWhereInput! = {}, orderBy: [RequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RequestWhereUniqueInput): [Request!]
  request(where: RequestWhereUniqueInput!): Request
  requestsCount(where: RequestWhereInput! = {}): Int
  races(where: RaceWhereInput! = {}, orderBy: [RaceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RaceWhereUniqueInput): [Race!]
  race(where: RaceWhereUniqueInput!): Race
  racesCount(where: RaceWhereInput! = {}): Int
  languages(where: LanguageWhereInput! = {}, orderBy: [LanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageWhereUniqueInput): [Language!]
  language(where: LanguageWhereUniqueInput!): Language
  languagesCount(where: LanguageWhereInput! = {}): Int
  calendars(where: CalendarWhereInput! = {}, orderBy: [CalendarOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CalendarWhereUniqueInput): [Calendar!]
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarsCount(where: CalendarWhereInput! = {}): Int
  logs(where: LogWhereInput! = {}, orderBy: [LogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogWhereUniqueInput): [Log!]
  log(where: LogWhereUniqueInput!): Log
  logsCount(where: LogWhereInput! = {}): Int
  pMS(where: PMWhereInput! = {}, orderBy: [PMOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PMWhereUniqueInput): [PM!]
  pM(where: PMWhereUniqueInput!): PM
  pMSCount(where: PMWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Character

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
